const passport = require('passport')
const GoogleStrategy = require('passport-google-oauth20').Strategy
const keys = require('../config/keys')
const mongoose = require('mongoose');

const User = mongoose.model('users');  // model class

passport.serializeUser((user, done) => {
    done(null, user.id);        // user.id is generated by mongo
});

passport.deserializeUser((id, done) => {    // done is the done function
    User.findById(id)
        .then(user => {
            done(null, user);
        });
});

passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClientID, 
            clientSecret: keys.googleClientSecret,
            callbackURL: '/auth/google/callback',
            proxy: true
        }, 
        (accessToken, refreshToken, profile, done) => {   // error function, callback function
            User.findOne({ googleId: profile.id })        // mongo query, search, return a promise
                .then(existingUser => {
                    if(existingUser) {
                        // we already have a record with the given profile ID
                        done(null, existingUser);         // null: no error here
                    } else {
                        // we don't have one, create a new one
                        new User({ googleId: profile.id})
                            .save()                             // Asychronized; save() will save this model instance to the database
                            .then(user => done(null, user));
                    }
                });
        }
    )
);